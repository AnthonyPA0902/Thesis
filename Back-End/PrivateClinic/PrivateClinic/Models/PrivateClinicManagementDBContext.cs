// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PrivateClinic.Models;

public partial class PrivateClinicManagementDBContext : DbContext
{
    public PrivateClinicManagementDBContext(DbContextOptions<PrivateClinicManagementDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Checkup> Checkups { get; set; }

    public virtual DbSet<Equipment> Equipment { get; set; }

    public virtual DbSet<ExaminitionAppointment> ExaminitionAppointments { get; set; }

    public virtual DbSet<MedicalRecord> MedicalRecords { get; set; }

    public virtual DbSet<MedicineOrder> MedicineOrders { get; set; }

    public virtual DbSet<MedicineStorage> MedicineStorages { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Prescription> Prescriptions { get; set; }

    public virtual DbSet<PriceList> PriceLists { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Treatment> Treatments { get; set; }

    public virtual DbSet<TreatmentOrder> TreatmentOrders { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Checkup>(entity =>
        {
            entity.ToTable("CHECKUP");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.DoctorId).HasColumnName("doctorId");
            entity.Property(e => e.Room)
                .HasMaxLength(10)
                .HasColumnName("room");
            entity.Property(e => e.Service)
                .HasMaxLength(30)
                .HasColumnName("service");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Checkups)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKUP_USER");
        });

        modelBuilder.Entity<Equipment>(entity =>
        {
            entity.ToTable("EQUIPMENT");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CleaningCycle)
                .HasMaxLength(20)
                .HasColumnName("cleaningCycle");
            entity.Property(e => e.Maintenance)
                .HasMaxLength(20)
                .HasColumnName("maintenance");
            entity.Property(e => e.TypeOfEquipment)
                .HasMaxLength(40)
                .HasColumnName("typeOfEquipment");
        });

        modelBuilder.Entity<ExaminitionAppointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_EXAMINITION APPOINTMENT");

            entity.ToTable("EXAMINITION_APPOINTMENT");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.DoctorId).HasColumnName("doctorId");
            entity.Property(e => e.TreatmentId).HasColumnName("treatmentId");

            entity.HasOne(d => d.Doctor).WithMany(p => p.ExaminitionAppointments)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXAMINITION_APPOINTMENT_USER");

            entity.HasOne(d => d.Treatment).WithMany(p => p.ExaminitionAppointments)
                .HasForeignKey(d => d.TreatmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXAMINITION_APPOINTMENT_TREATMENT");
        });

        modelBuilder.Entity<MedicalRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MEDICAL RECORD");

            entity.ToTable("MEDICAL_RECORD");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.DoctorId).HasColumnName("doctorId");

            entity.HasOne(d => d.Customer).WithMany(p => p.MedicalRecordCustomers)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAL_RECORD_USER");

            entity.HasOne(d => d.Doctor).WithMany(p => p.MedicalRecordDoctors)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAL_RECORD_USER1");
        });

        modelBuilder.Entity<MedicineOrder>(entity =>
        {
            entity.ToTable("MEDICINE_ORDER");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MedicineId).HasColumnName("medicineId");
            entity.Property(e => e.OrderDetailsId).HasColumnName("orderDetailsId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.Medicine).WithMany(p => p.MedicineOrders)
                .HasForeignKey(d => d.MedicineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICINE_ORDER_MEDICINE_STORAGE");

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.MedicineOrders)
                .HasForeignKey(d => d.OrderDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICINE_ORDER_ORDER_DETAILS");
        });

        modelBuilder.Entity<MedicineStorage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MEDICINE STORAGE");

            entity.ToTable("MEDICINE_STORAGE");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ExpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("expiredDate");
            entity.Property(e => e.ImportDate)
                .HasColumnType("datetime")
                .HasColumnName("importDate");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.PriceId).HasColumnName("priceId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.TypeOfMedicine)
                .HasMaxLength(50)
                .HasColumnName("typeOfMedicine");

            entity.HasOne(d => d.Price).WithMany(p => p.MedicineStorages)
                .HasForeignKey(d => d.PriceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICINE_STORAGE_PRICE_LIST");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("ORDER");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Context)
                .HasMaxLength(100)
                .HasColumnName("context");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Method)
                .HasMaxLength(30)
                .HasColumnName("method");
            entity.Property(e => e.OrderDetailsId).HasColumnName("orderDetailsId");
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .HasColumnName("status");
            entity.Property(e => e.Total).HasColumnName("total");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_USER");

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrderDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDER_ORDER_DETAILS");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("ORDER_DETAILS");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasColumnName("description");
            entity.Property(e => e.TypeOfOrder)
                .HasMaxLength(30)
                .HasColumnName("typeOfOrder");
        });

        modelBuilder.Entity<Prescription>(entity =>
        {
            entity.ToTable("PRESCRIPTION");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.DoctorId).HasColumnName("doctorId");
            entity.Property(e => e.MedicineId).HasColumnName("medicineId");
            entity.Property(e => e.TypeOfPrescription)
                .HasMaxLength(100)
                .HasColumnName("typeOfPrescription");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Prescriptions)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESCRIPTION_USER");

            entity.HasOne(d => d.Medicine).WithMany(p => p.Prescriptions)
                .HasForeignKey(d => d.MedicineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESCRIPTION_MEDICINE_STORAGE");
        });

        modelBuilder.Entity<PriceList>(entity =>
        {
            entity.ToTable("PRICE_LIST");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.UpdateDate)
                .HasMaxLength(20)
                .HasColumnName("updateDate");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("ROLE");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RoleType)
                .HasMaxLength(30)
                .HasColumnName("roleType");
        });

        modelBuilder.Entity<Treatment>(entity =>
        {
            entity.ToTable("TREATMENT");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DoctorId).HasColumnName("doctorId");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.PriceId).HasColumnName("priceId");
            entity.Property(e => e.Session).HasColumnName("session");

            entity.HasOne(d => d.Doctor).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TREATMENT_USER");

            entity.HasOne(d => d.Price).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.PriceId)
                .HasConstraintName("FK_TREATMENT_PRICE_LIST");
        });

        modelBuilder.Entity<TreatmentOrder>(entity =>
        {
            entity.ToTable("TREATMENT_ORDER");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OrderDetailsId).HasColumnName("orderDetailsId");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.TreatmentId).HasColumnName("treatmentId");

            entity.HasOne(d => d.OrderDetails).WithMany(p => p.TreatmentOrders)
                .HasForeignKey(d => d.OrderDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TREATMENT_ORDER_ORDER_DETAILS");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentOrders)
                .HasForeignKey(d => d.TreatmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TREATMENT_ORDER_TREATMENT");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("USER");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .HasColumnName("address");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .HasMaxLength(30)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .HasColumnName("phone");
            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USER_ROLE");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}